package org.postgresql.sql2.communication.packets.parts;

public class ErrorResponseField {
  public enum Types {
    /**
     * Severity: the field contents are ERROR, FATAL, or PANIC (in an error message), or WARNING, NOTICE, DEBUG, INFO,
     * or LOG (in a notice message), or a localized translation of one of these. Always present.
     */
    LOCALIZED_SEVERITY((byte) 'S'),

    /**
     * Severity: the field contents are ERROR, FATAL, or PANIC (in an error message), or WARNING, NOTICE, DEBUG, INFO,
     * or LOG (in a notice message). This is identical to the S field except that the contents are never localized.
     * This is present only in messages generated by PostgreSQL versions 9.6 and later.
     */
    SEVERITY((byte) 'V'),

    /**
     * Code: the SQLSTATE code for the error (see Appendix A). Not localizable. Always present.
     */
    SQLSTATE_CODE((byte) 'C'),

    /**
     * Message: the primary human-readable error message. This should be accurate but terse (typically one line).
     * Always present.
     */
    MESSAGE((byte) 'M'),

    /**
     * Detail: an optional secondary error message carrying more detail about the problem. Might run to multiple lines.
     */
    DETAIL((byte) 'D'),

    /**
     * Hint: an optional suggestion what to do about the problem. This is intended to differ from Detail in that it
     * offers advice (potentially inappropriate) rather than hard facts. Might run to multiple lines.
     */
    HINT((byte) 'H'),

    /**
     * Position: the field value is a decimal ASCII integer, indicating an error cursor position as an index into the
     * original query string. The first character has index 1, and positions are measured in characters not bytes.
     */
    POSITION((byte) 'P'),

    /**
     * Internal position: this is defined the same as the P field, but it is used when the cursor position refers to an
     * internally generated command rather than the one submitted by the client. The q field will always appear when
     * this field appears.
     */
    INTERNAL_POSITION((byte) 'p'),

    /**
     * Internal query: the text of a failed internally-generated command. This could be, for example, a SQL query
     * issued by a PL/pgSQL function.
     */
    INTERNAL_QUERY((byte) 'q'),

    /**
     * Where: an indication of the context in which the error occurred. Presently this includes a call stack traceback
     * of active procedural language functions and internally-generated queries. The trace is one entry per line, most
     * recent first.
     */
    WHERE((byte) 'W'),

    /**
     * Schema name: if the error was associated with a specific database object, the name of the schema containing that
     * object, if any.
     */
    SCHEMA_NAME((byte) 's'),

    /**
     * Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name
     * field for the name of the table's schema.)
     */
    TABLE_NAME((byte) 't'),

    /**
     * Column name: if the error was associated with a specific table column, the name of the column. (Refer to the
     * schema and table name fields to identify the table.)
     */
    COLUMN_NAME((byte) 'c'),

    /**
     * Data type name: if the error was associated with a specific data type, the name of the data type. (Refer to the
     * schema name field for the name of the data type's schema.)
     */
    DATA_TYPE_NAME((byte) 'd'),

    /**
     * Constraint name: if the error was associated with a specific constraint, the name of the constraint. Refer to
     * fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints,
     * even if they weren't created with constraint syntax.)
     */
    CONSTRAINT_NAME((byte) 'n'),

    /**
     * File: the file name of the source-code location where the error was reported.
     */
    FILE((byte) 'F'),

    /**
     * Line: the line number of the source-code location where the error was reported.
     */
    LINE((byte) 'L'),

    /**
     * Routine: the name of the source-code routine reporting the error.
     */
    ROUTINE_NAME((byte) 'R'),

    UNKNOWN((byte) 0);


    private byte value;

    Types(byte value) {

      this.value = value;
    }

    /**
     * Finds the ErrorResponse object for it's byte.
     * @param input the int to search for
     * @return matching ErrorResponse object
     */
    public static Types lookup(int input) {
      for (Types t : values()) {
        if (t.value == input) {
          return t;
        }
      }

      return UNKNOWN;
    }
  }

  private Types type;
  private String message;

  public ErrorResponseField(Types type, String message) {
    this.type = type;
    this.message = message;
  }

  public Types getType() {
    return type;
  }

  public String getMessage() {
    return message;
  }
}
